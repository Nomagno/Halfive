; THIS PENDS AN UPDATE, IT IS RUNNING ON AN EXTREMELY OLD H5VM VERSION
; THIS PENDS AN UPDATE, IT IS RUNNING ON AN EXTREMELY OLD H5VM VERSION
; THIS PENDS AN UPDATE, IT IS RUNNING ON AN EXTREMELY OLD H5VM VERSION
; THIS PENDS AN UPDATE, IT IS RUNNING ON AN EXTREMELY OLD H5VM VERSION
; THIS PENDS AN UPDATE, IT IS RUNNING ON AN EXTREMELY OLD H5VM VERSION
; THIS PENDS AN UPDATE, IT IS RUNNING ON AN EXTREMELY OLD H5VM VERSION

;Copyright Nomagno 2021, 2022, 2023
;
;Permission is hereby granted, free of charge, to any person obtaining
;a copy of this software and associated documentation files (the "Software"),
;to deal in the Software without restriction, including without limitation
;the rights to use, copy, modify, merge, publish, distribute, sublicense,
;and/or sell copies of the Software, and to permit persons to whom the
;Software is furnished to do so, subject to the following conditions:

;The above copyright notice and this permission notice (including the next
;paragraph) shall be included in all copies or substantial portions of the
;Software.
;
;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
;IN THE SOFTWARE.


; To be able to use the definitions here,
; include at the start of your file:
; #i /path/to/base.h5asm

; INCLUDE
; #i /path/to/file.h5asm
; file.h5asm substituted in place of statement and preprocessed normally

; MACRO
; #d macro,meaning
; Every instance of macro is replaced with meaning, starting expansion with the ones defined later

; LABEL
; >LABELNAME>
; Must appear at the beggining of a line containing a
; regular instruction after the preprocessing stage.
; All references in the code to <LABELNAME< get replaced
; with the difference of the instruction index to instruction
; index >LABELNAME> appeared in. Used for absolute jumping
; with skpz and skmz

; To preprocess your code so it can
; be accepted by the assembler, run:
; sh asmpp.sh /path/to/yourcode.h5asm > preprocessed_file


; Base library for Halfive assembly
; Contains:
;   Special register mnemonic macros
;   Two utility pseudo-instructions
;   Shorthand symbols for 16 first addresses

; Specification-defined registers:

; Zero flag
#d _ZF,FFFF
; Carry flag
#d _CF,FFFE
; Input register
#d _IN,FFFD
; Output register
#d _OU,FFFC
; Program counter low and high
#d _PC,FFFB
; Finish flag
#d _FF,FFFA
; Purposefully unmapped memory
#d _ERR,FFF0

;Shorthand addresses:
#d !A,0
#d !B,1
#d !C,2
#d !D,3
#d !W,4
#d !X,5
#d !Y,6
#d !Z,7


; Pseudo-instructions:

; Normalize zero flag, TWO instructions:
; if it is nonzero set it to one
#d NRM_ZF,skpz =1 __ set _ZF =1

; Invert zero flag, FOUR instructions:
; if it is nonzero set it to zero,
; if it is zero set it to one
#d INV_ZF,skpz =2 __ set _ZF =0 __ skpz =1 __ set _ZF =1

; Constant for info on callstack
#d @,=500F


; Subroutine _PRINT, ID =0
; Takes pointer to start of memory to print at pointer !A
; And number of times to print at address !B
#d _PRINT,=0
func _PRINT @ ; Start of subroutine print
	>PRINT_LOOP> set _OU *!A ; Print out value at pointer 0
		add !A =1 ; Increment pointer
		sub !B =1 ; Decrement loop counter
		INV_ZF ; Invert zero flag
	skmz <PRINT_LOOP< ; Jump back to start of loop if addr. 1 != 0
ret _PRINT @ ; End of subroutine print

; Subroutine _MULT, ID =1
; [THIS IS THE FASTEST VERSION, REST ARE FOR EXAMPLES OF DIFFERENT APPROACHES]
; Takes first operand at address !A
; And second operand at address !B
; Then deposits result of multiplication at address !C
#d _MULT,=1
func _MULT @
	set !C =0 ; Reset result storage
	set 5 =0 ; Address 5 is the loop counter
	>MULT_FAST_LOOP> set 3 !B ; Copy second operand to address 3
		set 4 =0F   ;
		sub 4 5     ;
		shift 3 4   ;
		shift 3 =1F ; These 4 instructions get the bit at the [i]th position
		set 6 =0 ; Reset address 6
		cmp 3 =1
		INV_ZF
		skpz <MULT_FAST_IF< ; IF the [i]th bit of the second operand is 1, then
			set 6 !A ; Set address 6 to the first operand (binary product)
			shift 6 5 ; Shift it left by [i] bits to get the partial product
			add !C 6 ; Add the partial product to the result
		>MULT_FAST_IF> add 5 =1 ; Increment the loop counter
		cmp 5 =10 ; Compare the loop counter with 0x10, value where it shall quit
		INV_ZF
	skmz <MULT_FAST_LOOP< ; If the loop counter isn't 0xF yet, loop
ret _MULT @

; Subroutine _MULT, ID =2
; Takes start of origin range at pointer !A
; Takes start of destination range at pointer !B
; Takes number number of elements to copy at address !C
#d _MEMCPY,=2
func _MEMCPY @
	>MEMCPY_LOOP> set *!B *!A
		sub !C =1
		add !A =1
		add !B =1
		cmp !C =0
		INV_ZF
	skmz <MEMCPY_LOOP<
ret _MEMCPY @

; Subroutine _SETPIX, ID =20
; Takes X coordinate at address !A
; Takes Y coordinate at address !B
; Takes pixel value at address !C
; Then writes pixel to screen at those coordinates
#d _SETPIX,=20
func _SETPIX @
	set 0 0
ret _SETPIX @
set _OU =DEAD

; Subroutine _CPYSPRITE, ID =21
; Takes X coordinate at address !A
; Takes Y coordinate at address !B
; Takes sprite index at address !C
; Then writes sprite to screen at those coordinates, not writing out of bounds pixels
#d _CPYSPRITE,=21
func _CPYSPRITE @
	set 0 0
ret _CPYSPRITE @

; Aligned sprite table
; SPR_IDX1 SPR_IDX2 SPR_IDX3 SPR_IDX4... SPR_IDX64
; 8 pixel coordinate increments

; Unaligned sprite table
; SPR_X1 SPR_Y1 SPR_IDX1 ... 0 0 0 [end of table, don't have sprite index 0 at origin!]

; Animation table
; START_FRAME_IDX1 END_FRAME_IDX1 PER_FRAME_INCREMENT ... 0 0 0 [end of table]

; Subroutine _RENDERTABLE, ID =24
; Takes X coordinate at address !A
; Takes Y coordinate at address !B
; Takes sprite table start at pointer !C
; Takes camera coordinates at address !D
; Then renders aligned sprite table to screen at those coordinates, not writing out of bounds pixels or out of camera pixels
#d _RENDERTABLEALIGNEDCAMERA,=24
func _RENDERTABLEALIGNEDCAMERA @
	set 0 0
ret _RENDERTABLEALIGNEDCAMERA @

; Subroutine _RENDERTABLEALIGNED, ID =22
; Takes X coordinate at address !A
; Takes Y coordinate at address !B
; Takes sprite table start at pointer !C
; Then renders aligned sprite table to screen offset by those coordinates, not writing out of bounds pixels
#d _RENDERTABLEALIGNED,=22
func _RENDERTABLEALIGNED @
	set 0 0
ret _RENDERTABLEALIGNED @

; Subroutine _RENDERTABLE, ID =25
; Takes X coordinate at address !A
; Takes Y coordinate at address !B
; Takes sprite table start at pointer !C
; Takes camera coordinates at address !D
; Then renders unaligned sprite table to screen at those coordinates, not writing out of bounds pixels or out of camera pixels
#d _RENDERTABLECAMERA,=25
func _RENDERTABLECAMERA @
	set 0 0
	set 0 0
ret _RENDERTABLECAMERA @

; Subroutine _RENDERTABLE, ID =23
; Takes X coordinate at address !A
; Takes Y coordinate at address !B
; Takes sprite table start pointer !C
; Then renders unaligned sprite table to screen at those coordinates, not writing out of bounds pixels
#d _RENDERTABLE,=23
func _RENDERTABLE @
	set 0 0
	set 0 0
ret _RENDERTABLE @


; Sheewol Gear framework

; Example code: change first 16 pixels of row 1 in 64x64PX screen in accordance 
;                with addition-based progressions, visualize inputs to next two pixels
; !!!WARNING!!!
; This specific pattern is kind of jarring, if you're prone to seizures please don't run it
; !!!WARNING!!!
>H5GEAR_TEST_JUMPBACK> add 8000 =1
	add 8001 =5
	add 8002 =1
	add 8003 =2
	add 8004 =3
	add 8005 =4
	add 8006 =5
	add 8007 =6
	add 8008 =7
	add 8009 =8
	add 800A =9
	add 800B =A
	add 800C =B
	add 800D =C
	add 800E =D
	add 800F =E
	set 8010 FFFD ; Visualize input register changes to pixels [0, 16] and [0, 17]
	set !A FFFD ; Copy to register
	shift !A =14 ; Shift right four bits to get arrows
	set 8011 !A ; Copy to pixel

	set _ZF =0
	set _FF =1 ; End frame
skmz <H5GEAR_TEST_JUMPBACK<
set _OU =DEAD
