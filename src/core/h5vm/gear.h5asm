;Copyright Nomagno 2021, 2022, 2023
;
;Permission is hereby granted, free of charge, to any person obtaining
;a copy of this software and associated documentation files (the "Software"),
;to deal in the Software without restriction, including without limitation
;the rights to use, copy, modify, merge, publish, distribute, sublicense,
;and/or sell copies of the Software, and to permit persons to whom the
;Software is furnished to do so, subject to the following conditions:

;The above copyright notice and this permission notice (including the next
;paragraph) shall be included in all copies or substantial portions of the
;Software.
;
;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
;IN THE SOFTWARE.


; To be able to use the definitions here,
; include at the start of your file:
; #i /path/to/base.h5asm

; INCLUDE
; #i /path/to/file.h5asm
; file.h5asm substituted in place of statement and preprocessed normally

; MACRO
; #d macro,meaning
; Every instance of macro is replaced with meaning, starting expansion with the ones defined later

; LABEL
; >LABELNAME>
; Must appear at the beggining of a line containing a
; regular instruction after the preprocessing stage.
; All references in the code to <LABELNAME< get replaced
; with the difference of the instruction index to instruction
; index >LABELNAME> appeared in. Used for absolute jumping
; with skpz and skmz

; To preprocess your code so it can
; be accepted by the assembler, run:
; sh asmpp.sh /path/to/yourcode.h5asm > preprocessed_file


; Base library for Halfive assembly
; Contains:
;   Special register mnemonic macros
;   Two utility pseudo-instructions
;   Shorthand symbols for 16 first addresses

; Specification-defined registers:

; Zero flag
#d _ZF,FFFF
; Carry flag
#d _CF,FFFE
; Input register
#d _IN,FFFD
; Output register
#d _OU,FFFC
; Program counter low and high
#d _PC,FFFB
; Finish flag
#d _FF,FFFA
; Purposefully unmapped memory
#d _ERR,FFF0

;Shorthand addresses:
#d !A,0
#d !B,1
#d !C,2
#d !D,3
#d !W,4
#d !X,5
#d !Y,6
#d !Z,7


; Pseudo-instructions:

; Normalize zero flag, TWO instructions:
; if it is nonzero set it to one
#d NRM_ZF,skpz =1 __ set _ZF =1

; Invert zero flag, FOUR instructions:
; if it is nonzero set it to zero,
; if it is zero set it to one
#d INV_ZF,skpz =2 __ set _ZF =0 __ skpz =1 __ set _ZF =1

; Constant for info on callstack
#d @,=E00F


; Subroutine _PRINT, ID =0
; Takes pointer to start of memory to print at pointer !A
; And number of times to print at address !B
#d _PRINT,=0
func _PRINT @ ; Start of subroutine print
	>PRINT_LOOP> set _OU *!A ; Print out value at pointer 0
		add !A =1 ; Increment pointer
		sub !B =1 ; Decrement loop counter
		INV_ZF ; Invert zero flag
	skmz <PRINT_LOOP< ; Jump back to start of loop if addr. 1 != 0
ret _PRINT @ ; End of subroutine print

; Subroutine _MULT, ID =1
; [THIS IS THE FASTEST VERSION, REST ARE FOR EXAMPLES OF DIFFERENT APPROACHES]
; Takes first operand at address !A
; And second operand at address !B
; Then deposits result of multiplication at address !C
#d _MULT,=1
func _MULT @
	set !C =0 ; Reset result storage
	set 5 =0 ; Address 5 is the loop counter
	>MULT_FAST_LOOP> set 3 !B ; Copy second operand to address 3
		set 4 =0F   ;
		sub 4 5     ;
		shift 3 4   ;
		shift 3 =1F ; These 4 instructions get the bit at the [i]th position
		set 6 =0 ; Reset address 6
		cmp 3 =1
		INV_ZF
		skpz <MULT_FAST_IF< ; IF the [i]th bit of the second operand is 1, then
			set 6 !A ; Set address 6 to the first operand (binary product)
			shift 6 5 ; Shift it left by [i] bits to get the partial product
			add !C 6 ; Add the partial product to the result
		>MULT_FAST_IF> add 5 =1 ; Increment the loop counter
		cmp 5 =10 ; Compare the loop counter with 0x10, value where it shall quit
		INV_ZF
	skmz <MULT_FAST_LOOP< ; If the loop counter isn't 0xF yet, loop
ret _MULT @

; Sheewol Gear framework

; Example code: change first 16 pixels of row 1 in 64x64PX screen in accordance 
;                with addition-based progressions, visualize inputs to next two pixels
; !!!WARNING!!!
; This specific pattern is kind of jarring, if you're prone to seizures please don't run it
; !!!WARNING!!!
>H5GEAR_TEST_JUMPBACK> add B000 =1
	add B001 =5
	add B002 =1
	add B003 =2
	add B004 =3
	add B005 =4
	add B006 =5
	add B007 =6
	add B008 =7
	add B009 =8
	add B00A =9
	add B00B =A
	add B00C =B
	add B00D =C
	add B00E =D
	add B00F =E
	set B010 FFFD ; Visualize input register changes to pixels [0, 16] and [0, 17]
	set !A FFFD ; Copy to register
	shift !A =14 ; Shift right four bits to get arrows
	set B011 !A ; Copy to pixel

	set _ZF =0
	set _FF =1 ; End frame
skmz <H5GEAR_TEST_JUMPBACK<
set _OU =DEAD
