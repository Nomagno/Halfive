(... ((lambda (x) (add (car (cons 4 7)) x)) 6) ...)

allocate 6; 
create stack frame; 
set var x to address of 6; 
JUMP to anonymous procedure; 
	allocate 4; 
	allocate 7; 
	create stack frame; 
	set var x to address of 4; 
	set var y to address 7; 
	JUMP to cons; 
		allocate (4 . 7); 
		set return field of previous frame to address of (4 . 7); 
		RETURN to anonymous procedure; 
	destroy stack frame; 
	destroy 4; 
	destroy 7; 
	allocate copy of (4 . 7); 
	destroy return field object (4 . 7); 
	create stack frame; 
	set var x to address of (4 . 7); 
	JUMP to car; 
		allocate 4; 
		set return field of previous stack frame to address of 4; 
		RETURN to anonymous procedure; 
	destroy stack frame; 
	allocate copy of 4; 
	destroy return field object 4; 
	destroy (4 . 7); 
	allocate stack frame; 
	set var x to address of 4; 
	set var y to address of 6; 
	JUMP to add; 
		allocate 10;
		set previous stack frame return field to address of 10; 
		RETURN to anonymous procedure; 
	destroy 4; 
	destroy 6; 
	allocate copy of 10; 
	destroy return field value 10; 
	set previous stack frame return field to address of 10; 
	RETURN to [CALLER]
[CALLER HAPPILY CONTINUES WITH ITS EXECUTION]
